$module-class-selector-enabled: true !default;
$module-child-selector-enabled: true !default;
$module-use-selector-enabled: true !default;
$module-import-selector-enabled: true !default;
$module-import-all-selector-enabled: true !default;

$modules: ();
$current-module: "";

@function module-segments($module) {
    $segments: ();

    $segment: "";
    @for $i from 1 through str-length($module) {
        $char: str-slice($module, $i, $i);
        @if $char == _ {
            $segments: append($segments, $segment);
            $segment: "";
        } @else {
            $segment: $segment + $char;
        }
    }

    $segments: append($segments, $segment);
    @return $segments;
}

@function module-selectors($module) {
    $segments: module-segments($module);
    $module-depth: length($segments);
    @if $module-depth == 0 {
        @return ();
    } @else {
        $root-segment: head($segments);
        $selectors: list(".#{$root-segment}");

        $i: 2;
        @while $i <= $module-depth {
            $segment: nth($segments, $i);
            $new-selectors: ();

            @each $parent in $selectors {
                @if $module-class-selector-enabled {
                    $class-selector: "#{$parent}_#{$segment}";
                    $new-selectors: append($new-selectors, $class-selector);
                }

                @if $module-child-selector-enabled {
                    $child-selector: "#{$parent} > ._#{$segment}";
                    $new-selectors: append($new-selectors, $child-selector);
                }

                @if $module-use-selector-enabled {
                    $use-selector: "#{$parent} > meta.#{$segment} ~ * .#{$segment}";
                    $new-selectors: append($new-selectors, $use-selector);
                }

                @if $module-import-selector-enabled {
                    $import-selector: "#{$parent} > meta._#{$segment} ~ * ._#{$segment}";
                    $new-selectors: append($new-selectors, $import-selector);
                }

                @if $module-import-all-selector-enabled {
                    $import-all-selector: "#{$parent} > meta._ ~ * ._#{$segment}";
                    $new-selectors: append($new-selectors, $import-all-selector);
                }
            }

            $selectors: $new-selectors;
            $i: $i + 1;
        }

        @return $selectors;
    }
}

@mixin def-module($segment) {
	$parent-module: $current-module;

	@if $current-module == "" {
        $current-module: $segment !global;
    } @else {
        $current-module: "#{$current-module}_#{$segment}" !global;
    }

	$modules: tree-add($modules, module-segments($current-module)) !global;

	@include def-resource(module, without-selectors, $current-module) {
		@content;
	}

	@include def-resource(module, with-selectors, $current-module) {
		@each $selector in module-selectors($current-module) {
			#{$selector} {
				@include resource(module, without-selectors, $current-module);
			}
		}
	}

	$current-module: $parent-module !global;
}

@mixin module($module, $inline: false, $submodules: true) {
    @if $inline {
        @include resource(module, without-selectors, $module);
    } @else {
        @include resource(module, with-selectors, $module);
    }

    @if $submodules {
        @each $segment, $_ in tree-get($modules, module-segments($module), ()) {
            @include module("#{$module}_#{$segment}");
        }
    }
}

@mixin modules($modules...) {
    @each $module in list($modules) {
        @include module($module);
    }
}
