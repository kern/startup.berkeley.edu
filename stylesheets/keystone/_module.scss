$modules: ();
$current-module: ();

@function module-selectors($module, $nest-level: 0) {
	$module-depth: length($module);
	@if $module-depth == 0 {
		@return ();
	} @else {
		$parent-module: ();
		$child-module: $module;
		$selectors: ();

		$selector: ".";
		@for $i from 0 to $nest-level { 
			$selector: $selector + _;
		}
		$selector: unquote($selector + list-concat($module, _));
		$selectors: append($selectors, $selector);

		$i: 1;
		@while $i < $module-depth {
			$parent-module: append($parent-module, head($child-module));
			$child-module: tail($child-module);

			$parent-selectors: module-selectors($parent-module, $nest-level);
			$child-selectors: module-selectors($child-module, $nest-level + $i);

			@each $parent-selector in $parent-selectors {
				@each $child-selector in $child-selectors {
					$selector: "#{$parent-selector} #{$child-selector}";
					$selectors: append($selectors, $selector, comma);
				}
			}

			$i: $i + 1;
		}

		@return list-unique($selectors);
	}
}

@mixin def-module($name...) {
	$name: list($name);

	$parent-module: $current-module;
	$current-module: join($current-module, $name) !global;
	$modules: tree-add($modules, $current-module) !global;

	@include def-resource(module, without-selectors, $current-module) {
		@content;
	}

	@include def-resource(module, with-selectors, $current-module) {
		@each $selector in module-selectors($current-module) {
			#{$selector} {
				@include resource(module, without-selectors, $current-module);
			}
		}
	}

	$current-module: $parent-module !global;
}

@mixin module($name...) {
	@include resource(module, with-selectors, list($name));
}

@mixin module-inline($name...) {
	@include resource(module, without-selectors, list($name));
}

@mixin module-tree($name...) {
	@if $name != () {
		$name: list($name);
		@include resource(module, with-selectors, $name);

		$temp-modules: $modules;
		@each $segment in $name {
			$temp-modules: map-get($temp-modules, $segment)
		}

		@each $segment, $_ in $temp-modules {
			@include module-tree(append($name, $segment)...);
		}
	}
}
